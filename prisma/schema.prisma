generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  Admin
  User
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  banned        Boolean?
  image         String?
  role          Role      @default(User)

  settings UserSettings?
  stories  Story[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Account   Account[]
  Session   Session[]
}

enum ColorScheme {
  Dark
  Light
}

model UserSettings {
  id          String      @id @default(cuid())
  onboarded   Boolean     @default(false)
  colorScheme ColorScheme @default(Dark)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visiblity {
  Public
  Private
}

enum Category {
  Fiction
  Mystery
  Thriller
  Horror
  Historical
  Romance
  Western
  Bildungsroman
  Fantasy
  Dystopian
  Magical
  Realism
  Literature
}

model Story {
  id         String    @id @default(cuid())
  title      String
  body       String
  coverPhoto String
  category   Category
  visiblity  Visiblity @default(Private)
  removed    Boolean?
  author     User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Report {
  id          String @id @default(cuid())
  StoryId     String @unique
  reporterId  String @unique
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id String @id @default(cuid())

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  expires_in        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
